<!DOCTYPE html>
<!-- saved from url=(0041)http://127.0.0.1:8000/ParticlesProto.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  	<script type="text/javascript" src="./ParticlesProto_files/d3.js"></script>
  </head>
  <body>

  
  
  <script>
		
		// global variable definitions.
		{
		var width = 1920;
		var height = 1080;
		var updateInterval = 30000;
		var FrameRate = 24;
		var frame = 0;
		var Colours = ['red','blue'];
		var SelfRotationDuration = 20;
		var numParticleScale = d3.scaleLinear()
								.domain([0,100])
								.range([10,100]);
		}
		
		// This is basic setup code - includes the creation of our invisible element that isn't tied to the DOM
		{
		var chart = d3.select("body")
					.append("canvas")
					.attr("width", width)
					.attr("height", height);
		
		var context = chart.node().getContext("2d");
		
		// The problem with using traditional d3 is the render time. Especially when rendering many particles at a time.
		
		// Create an in memory only element of type 'custom'
		var detachedContainer = document.createElement("custom");

		// Create a d3 selection for the detached container. We won't
		// actually be attaching it to the DOM.
		var dataContainer = d3.select(detachedContainer);
		
		
		}
		
		// define the particle objects.
		{
		
		function selfParticle(NodeX, NodeY, NodeID, Theta, r, direction, duration){
			
			this.cx = NodeX;
			
			this.cy = NodeY;
			
			this.theta = Theta;
			
			this.r = r;
			
			this.duration = duration;
			
			this.direction = direction;
			
			this.NodeID = NodeID;
			
			this.ID = Date();
			
			this.setxy = function(){
				this.x = NodeX + Math.cos(this.theta)*this.r;
				this.y = NodeY + Math.sin(this.theta)*this.r;
			}
			
			this.update = function(){
				this.theta += this.direction * 2*Math.PI / (this.duration*FrameRate);
				
				this.setxy();
			}
			
			this.setxy();
			
		};
		
		function coregParticle(NodeX, NodeY, NodeID, DestX, DestY, remoteDirection, homeDirection, r, maxR, minR, duration, delay){
			
			this.ox = NodeX;
			this.oy = NodeY;
			this.dx = DestX;
			this.dy = DestY;
			this.NodeID = NodeID;
			this.TravelPhase = null;
			this.delay = frame + delay*FrameRate;
			this.ID = Date();
			this.x = null;
			this.y = null;
			
			this.remoteDirection = remoteDirection;
			this.homeDirection = homeDirection;
			this.relativePlacementFactor = this.homeDirection*Math.sign(this.dx - this.ox);
			
			this.r = r;
			this.maxR = maxR;
			this.minR = minR;
			
			this.setStartTheta = function(NodeDirection){
				
					
					this.nodesAngle =  Math.atan((this.dx-this.ox)/(this.dy-this.oy)) - Math.PI/2
						
					this.startTheta = this.theta = this.nodesAngle + this.relativePlacementFactor*(- Math.asin(this.r/this.maxR));
				
			};
			
			this.setxy = function(){
				
				
				switch (this.TravelPhase) {
					case 0:
						this.firstX = this.ox + this.maxR*Math.cos(this.theta);
						this.firstY = this.oy - this.maxR*Math.sin(this.theta);
						this.x = this.firstX;
						this.y = this.firstY;
						break;
						
						
					case 1:
						this.x += (this.dx  - this.ox)*this.lineprop/(this.durationLine*FrameRate);
						this.y += (this.dy  - this.oy)*this.lineprop/(this.durationLine*FrameRate);
						break;
						
					case 1.1: // This needs to be updated to work in all cases! right now it assumes a case of 2 nodes
						this.x = this.r*Math.cos(this.theta) + this.dx - Math.sign(this.dx - this.ox)*(this.minR + this.maxR);
						this.y = this.r*Math.sin(this.theta) + this.dy - Math.sign(this.dx - this.ox)*(this.minR + this.maxR);
						break;
						
					case 2:
						this.x = this.dx + Math.cos(this.theta)*this.dr;
						this.y = this.dy + Math.sin(this.theta)*this.dr;
						this.theta += this.homeDirection*this.remoteDirection*2*Math.PI/(this.durationRotation*FrameRate);
						break;
						
					case 3:
						this.x = this.firstX;
						this.y = this.firstY;
						this.theta = this.startTheta;
				}
				
			}
			
			this.setStartTheta(homeDirection);
			
			// set the radius of the particle from the remote node based on the direction it will go relative to its homenode
			if(remoteDirection > 0){
				this.dr = r
				lineDistance = (Math.sqrt(Math.pow(this.dy-this.oy,2) + Math.pow(this.dx-this.ox,2)) - this.maxR*Math.cos(this.startTheta - this.nodesAngle));
			}
			else{
				this.dr = minR + (maxR - r)
				lineDistance = (Math.sqrt(Math.pow(this.dy-this.oy,2) + Math.pow(this.dx-this.ox,2)) - this.maxR*Math.cos(this.startTheta - this.nodesAngle)) - minR - maxR;
				this.durationPreRot =  duration/4;
				
			}
			
			this.lineprop = lineDistance / Math.sqrt(Math.pow(this.dy-this.oy,2) + Math.pow(this.dx-this.ox,2));
			
			
			rotationDistance = 2*Math.PI*this.dr;
			
			
			this.durationLine = duration*(lineDistance/(2*Math.PI*this.r));
			this.durationRotation = duration*(rotationDistance/(2*Math.PI*this.r));
			
			
			
			// create the particle location update function. depends on 
			if(this.remoteDirection>0){
				this.update = function(){
					
					if (frame > this.delay + (this.durationLine + this.durationRotation)*FrameRate){
						this.TravelPhase = 3;
						this.delay = frame;
						this.setxy();
					}
					else if (frame > this.delay + (this.durationLine)*FrameRate){
						this.TravelPhase = 2;
						this.setxy();
					}
					else if(frame > this.delay + 1){
						this.TravelPhase = 1;
						this.setxy();
						}
					else if(frame > this.delay){
						this.TravelPhase = 0;
						this.setxy();
						this.theta = this.remoteDirection*this.homeDirection*Math.PI/2;
					}
					
					
				
				}
				}
			else{
				this.update = function(){
					
					if (frame > this.delay + (this.durationLine + this.durationPreRot + this.durationRotation)*FrameRate){
						this.TravelPhase =3;
						this.delay = frame;
					}
					else if (frame > this.delay + (this.durationLine + this.durationPreRot)*FrameRate){
						this.TravelPhase = 2;
					}
					else if(frame > this.delay + this.durationLine*FrameRate){
						this.TravelPhase = 1.1;
						}
					else if(frame > this.delay + 1){
						this.TravelPhase = 1;
						}
					else if(frame > this.delay){
						this.TravelPhase = 0;
					}
					
					this.setxy()
				
				}
				}
			
			
			
		};
		
		function SelfParticles(NodeX, NodeY, NodeID, minR, maxR, duration){
			
			this.NodeX = NodeX;
			
			this.NodeY = NodeY;
			
			this.NodeID = NodeID;
			
			this.minR = minR;
			
			this.maxR = maxR;
			
			this.duration = duration;
			
			this.ParticleSet = new Set();
			
			this.updateSelf_value = function(self_value){
				
				this.self_value = self_value
				
				cur_num_particles = this.ParticleSet.size
				wanted_num_particles = Math.ceil(numParticleScale(Math.abs(self_value)))
				
				if(cur_num_particles > wanted_num_particles){
					
					this.ParticleSet.forEach(function(d,i){ 	
												if(i>wanted_num_particles){
													this.ParticleSet.delete(d)
													}
												});
					
				}
				else if(cur_num_particles < wanted_num_particles){
					for(i=0;i+cur_num_particles<wanted_num_particles; i++){
			
						r = Math.random() * (this.maxR-this.minR) + this.minR;
						Theta = i * 2 * Math.PI / wanted_num_particles;
								
						this.ParticleSet.add(new selfParticle(this.NodeX,this.NodeY,this.NodeID,Theta,Math.sign(self_value),1,this.duration+(Math.random()-0.5)*0.1*this.duration));
						
					}
				}
			}
			
			this.updateParticleLocations = function(){
				this.ParticleSet.forEach(function(d){d.update()})
				}
			};
		
		
		function coregParticles(NodeX, NodeY, NodeID, NodeDirection, DestX, DestY, DestDirection, maxR, minR, duration, windowtime){
			
			this.NodeX = NodeX;
			
			this.NodeY = NodeY;
			
			this.DestX = DestX;
			
			this.DestY = DestY;
			
			this.NodeDirection = NodeDirection;
			
			this.remoteDirection = DestDirection * NodeDirection;
			
			this.NodeID = NodeID;
			
			this.minR = minR;
			
			this.maxR = maxR;
			
			this.duration = duration;
			
			this.ParticleSet = new Set();
			
			this.updateCoreg_value = function(coreg_value){
				
				this.coreg_value = coreg_value
				
				cur_num_particles = this.ParticleSet.size
				wanted_num_particles = Math.ceil(numParticleScale(Math.abs(coreg_value)))
				
				if(cur_num_particles > wanted_num_particles){
					
					this.ParticleSet.forEach(function(d,i){ 	
												if(i>wanted_num_particles){
													this.ParticleSet.delete(d)
													}
												});
					
				}
				else if(cur_num_particles < wanted_num_particles){
					for(i=0;i+cur_num_particles<wanted_num_particles; i++){
			
						r = Math.random() * (this.maxR-this.minR) + this.minR;
								
						this.ParticleSet.add(new coregParticle(this.NodeX,this.NodeY,this.NodeID,this.DestX, this.DestY, this.remoteDirection, this.NodeDirection, r, this.maxR, this.minR, this.duration+(Math.random()-0.5)*0.1*this.duration, (i+cur_num_particles)*windowtime/wanted_num_particles));
					}
				}
			}
			
			this.updateParticleLocations = function(){
				this.ParticleSet.forEach(function(d){d.update()})
				}
			};
		
		}
		// Function definitions
		{
		// Create the center nodes of the visualization. This is what will denote subject's physio data. It'd be better to input scaled data that real data, as the value of the data points is the radius of the circles in pixels.
		
		// Nodes will be placed at equal angles around a circle with center w/2, h/2 and radius w/6.
		function drawNodes(data) {
		
		  // This tells us the radius of the circle around which the nodes will be placed.
		  var NodeCircleRadius = width/6;
		
		  // Where to place each node on the x axis
		  var NodeScaleX = function(d,i){
		  		return Math.cos(2*Math.PI*i/data.length)*NodeCircleRadius + width/2;
		  }
		  
		  // Where to place each node on the y axis
		  var NodeScaleY = function(d,i){
		  		return Math.sin(2*Math.PI*i/data.length)*NodeCircleRadius + height/2;
		  }
		  
		  // Specify a colour for each node
		  var colourScale = function(d,i){
		  		return Colours[i];
		  }

		  // bind the data to a class in the custom element called Nodes
		  var NodeElements = dataContainer.selectAll("custom.Nodes")
			.data(data);

		  // update existing elements to reflect additional incoming datapoints
		  NodeElements
			.attr("x", NodeScaleX)
			.attr("y", NodeScaleY)
			.attr("size", function(d){return d})

		  // for new elements, create a 'custom' dom node, of class Node
		  // with the appropriate arc attributes for canvas. Ideally, this only runs once when the viz begins.
		  NodeElements.enter()
			  .append("custom")
			  .classed("Nodes", true)
			  .attr("x", NodeScaleX)
			  .attr("y", NodeScaleY)
			  .attr("size", function(d) {return d})
			  .attr("fillStyle", colourScale);

		  // for exiting elements, change the size to 5 and make them grey. This is to denote missing data.
		  NodeElements.exit()
			.attr("size", 10)
			.attr("fillStyle", "lightgrey");
		}

		// Draw the current custom elements onto the canvas. Will redraw every time this function is called. It is recommended that all changes be made for a frame before calling drawCanvas.
		function drawCanvas(ParticleArray) {
		
		  	var colourScale = function(d){
		  		return Colours[d];
		  	};
			

		  // define canvas background
		  context.fillStyle = 'rgba(1,1,1,0)';
		  context.rect(0,0,chart.attr("width"),chart.attr("height"));
		  context.fill();
		  
		  //clear the canvas of old data.
		  context.clearRect(0,0,chart.attr("width"),chart.attr("height"));
		  
		  //draw the nodes onto the canvas.
		  var NodeElements = dataContainer.selectAll("custom.Nodes");
		  NodeElements.each(function(d) {
			var node = d3.select(this);

			context.beginPath();
			context.fillStyle = node.attr("fillStyle");
			context.arc(node.attr("x"), node.attr("y"), node.attr("size"), 0, 2*Math.PI);
			context.fill();
			context.closePath();

		  });
		  
		  //draw the Particles onto the canvas.
		  ParticleArray.forEach(function(d) {
		  	
			context.beginPath();
			context.fillStyle = colourScale(d.NodeID);
			context.arc(d.x, d.y, 3, 0, 2*Math.PI);
			context.fill();
			context.closePath();

		  });
		}
		
		}
		
		
		// testing playground
		{
		drawNodes([20,50]);
		
		test =[new SelfParticles(width/3, height/2, 1, 75, 125, SelfRotationDuration), new coregParticles(2*width/3, height/2, 0, 1, width/3, height/2, 1, 125, 75, 10, 30), new coregParticles(width/3, height/2, 1, 1, 2*width/3, height/2, 1, 125, 75, 10, 30), new SelfParticles(2*width/3, height/2, 0, 75, 125, SelfRotationDuration)];
		
		test[0].updateSelf_value(100);
		
		test[1].updateCoreg_value(50);
		
		test[2].updateCoreg_value(100);
		
		test[3].updateSelf_value(50);
		
		drawCanvas([...test[0].ParticleSet,...test[1].ParticleSet,...test[2].ParticleSet,...test[3].ParticleSet]);
		
		rotate = d3.interval(function(){
			test[0].updateParticleLocations();	
			test[1].updateParticleLocations();
			test[2].updateParticleLocations();	
			test[3].updateParticleLocations();
			drawCanvas([...test[0].ParticleSet,...test[1].ParticleSet,...test[2].ParticleSet,...test[3].ParticleSet])
			frame += 1;},1/FrameRate);
		
		
		testing = new coregParticles(2*width/3, height/2, 0, 1, width/3, height/2, 1, 125, 75, 10, 30)
		
		testing.updateCoreg_value(50);
		
		testloop = d3.interval(function(){ frame += 1; testing.updateParticleLocations(); drawCanvas([...testing.ParticleSet])}, 1/FrameRate);
		
		}
  </script><canvas width="1920" height="1080"></canvas>

</body></html>