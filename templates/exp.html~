<!doctype html>
<html>
    
    <head>
        <title>jspsych + psiturk example - simple go/no-go reaction time test</title>
        <script src="/static/lib/jquery-min.js" type="text/javascript"></script>
        <script src="/static/lib/underscore-min.js" type="text/javascript"></script>
        <script src="/static/lib/backbone-min.js" type="text/javascript"></script>
        
        <script src="/static/js/jspsych/jspsych.js" type="text/javascript"></script>
        <script src="/static/js/jspsych/plugins/jspsych-text.js" type="text/javascript"></script>
        <script src="/static/js/jspsych/plugins/jspsych-single-stim-delay.js" type="text/javascript"></script>
        <script src="/static/js/jspsych/plugins/jspsych-single-audio-delay.js" type="text/javascript"></script>
        <script src="/static/js/jspsych/plugins/jspsych-call-function.js" type="text/javascript"></script>
        
        <script type="text/javascript">
            // These fields provided by the psiTurk Server
            var uniqueId = "{{ uniqueId }}"; // a unique string identifying the worker/task
            var adServerLoc = "{{ adServerLoc }}"; // the location of your ad (so you can send user back at end of experiment)
            var mode = "{{ mode }}"; // is this running live, sandbox, or in debug mode?
        </script>
        
        <!-- utils.js and psiturk.js provide the basic psiturk functionality -->
        <script src="/static/js/utils.js" type="text/javascript"></script>
        <script src="/static/js/psiturk.js" type="text/javascript"></script>
        
        <link href="/static/css/jspsych.css" rel="stylesheet" type="text/css"></link>
   
			<style>
				img.trial {
					position: relative;
					top: 50%;
					transform: translateY(-50%);
				}
				
				.labelBox {
					width: 150px;
					display: inline-block;
					vertical-align: top;
					*display: inline;
    					zoom: 1
				}
			</style>
			
		</head>
    
    <body>
        <div id='jspsych-target' class='center-content' fill='black'></div>
    </body>
    <script>
        /* load psiturk */
        var psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

        /* text blocks */

        var welcome_block = {
            type: "text",
            text: "Welcome to the experiment. Press any key to begin.",
            cont_key: [32]
        };

        var instructions_block = {
            type: "text",
            text: "<p>In this experiment, a circle will appear in the center " + 
                "of the screen.</p><p>If the circle is <strong>blue</strong>, " + 
                "press the letter F on the keyboard as fast as you can.</p>" + 
                "<p>If the circle is <strong>orange</strong>, do not press " + 
                "any key.</p>" + 
                "<div class='left center-content'><img src='/static/images/grey.png'></img>" + 
                "<p class='small'><strong>Press the F key</strong></p></div>" + 
                "<p class='small'><strong>Do not press a key</strong></p></div>" + 
                "<p>Press any key to begin.</p>",
            timing_post_trial: 1000,
            cont_key: [13]
        };

        /* stimulus blocks */
        
        var n_probes = 18;
        var probe_block_length = 50;
        var probe_placement_array = Array.apply(null, {length: probe_block_length}).map(Number.call, Number)
				
				var thought_probe = {
						type: 'text',
						text: '<div id="Probeinstructions">Please indicate your mental state <strong>JUST BEFORE</strong> this screen appeared:</div>' + 
							'<div id="scaleReminder" style="top:70%"><div id="thoughtProbeLine" style="width:760px;"> <div class="labelBox">1</div>' +
							'<div class="labelBox">2</div><div class="labelBox">3</div><div class="labelBox">4</div><div class="labelBox">5</div></div>' +
							'<div style="width:760px;">|.............................|..............................|.............................|.............................|</div>' + 
							'<div id="thoughtProbeLine" style="text-align:left;width:760px;"><div class="labelBox" style="width:45px;"></div>' + 
							'<div class="labelBox" style="text-align:left;width:75px;">On Task</div><div class="labelBox" style="width:465px"></div>' + 
							'<div class="labelBox" style="text-align:right;width:175px">Unrelated Concerns</div></div></div>',
						cont_key: ["1","2","3","4","5",97,98,99,100,101]
				}
				
				/* prepare the visual metronome trials */
				{
				
        var single_visual_trial = [{
            stimulus: "/static/images/grey.png",
            data: {
                trial_type: 'visual'
            }
        }];
        
        var visual_trial_array = [];
        
        var min_probe_value = 10;
        
        for(i=0; i<n_probes; i++){
        	
					
					do {
						probe_location = jsPsych.randomization.sample(probe_placement_array, 1);
						}
					while(probe_location < min_probe_value);
				
					var pre_probe_visual_trials = jsPsych.randomization.repeat(single_visual_trial, probe_location);
					
					var post_probe_visual_trials = jsPsych.randomization.repeat(single_visual_trial, probe_block_length - probe_location);
				
					var pre_probe_visual_block = {
							type: "single-stim-delay",
							choices: [32],
							delay_stim: 650,
							timing_stim: 150,
							timing_response: 1300,
							timeline: pre_probe_visual_trials
					};
					
					var post_probe_visual_block = {
							type: "single-stim-delay",
							choices: [32],
							delay_stim: 650,
							timing_stim: 150,
							timing_response: 1300,
							timeline: post_probe_visual_trials
					};

					min_probe_value = probe_location - 40;
					
					visual_trial_array.push(pre_probe_visual_block);
					
					visual_trial_array.push(thought_probe);
					
					visual_trial_array.push(pre_probe_visual_block);
					
					
					
        };
        }
        /* prepare the sound metronome trials */
	{
        var sound_trial = [{
            stimulus: "/static/sounds/click.wav",
            data: {
                trial_type: 'auditory'
            }
        }];
        
        var sound_trial_array = [];
        
        var min_probe_value = 10;
        
        for(i=0; i<n_probes; i++){
        	
					
					do {
						probe_location = jsPsych.randomization.sample(probe_placement_array, 1);
						}
					while(probe_location < min_probe_value);
				
					var pre_probe_sound_trials = jsPsych.randomization.repeat(single_sound_trial, probe_location);
					
					var post_probe_sound_trials = jsPsych.randomization.repeat(single_sound_trial, probe_block_length - probe_location);
				
					var pre_probe_sound_block = {
							type: "single-audio-delay",
							choices: [32],
							delay_stim: 650,
							timing_stim: 150,
							timing_response: 1300,
							timeline: pre_probe_sound_trials
					};
					
					var post_probe_sound_block = {
							type: "single-audio-delay",
							choices: [32],
							delay_stim: 650,
							timing_stim: 150,
							timing_response: 1300,
							timeline: post_probe_sound_trials
					};
					
					min_probe_value = probe_location - 40;
					
					sound_trial_array.push(pre_probe_sound_block);
					
					sound_trial_array.push(thought_probe);
					
					sound_trial_array.push(pre_probe_sound_block);
					
					
					
        };
	}
        /* debrief block */

        var debrief_block = {
            type: "text",
            text: function() {
                return "<p>Your average response time was <strong>" + 
                "unknown " + "ms</strong>. Press " + 
                "any key to complete the experiment. Thank you!</p>";
            }
        };


        /* define experiment structure */

        var experiment_blocks = [];

        experiment_blocks.push(welcome_block);

        experiment_blocks.push(instructions_block);

        experiment_blocks = experiment_blocks.concat(thought_probe);

        experiment_blocks.push(debrief_block);

				
				function resize(){
					var height = window.innerHeight;
					var width = window.innerWidth;
          document.getElementById("jspsych-target").style.height = (height - 100) + "px";
          document.getElementById("jspsych-target").style.width = (width - 100) + "px";
        }
        
        window.onresize = function(){
        															resize();
        															}
				
        /* start the experiment */

        jsPsych.init({
            display_element: $('#jspsych-target'),
            timeline: experiment_blocks,
            fullscreen: true,
            on_finish: function() {
                psiturk.saveData({
                    success: function() { psiturk.completeHIT(); }
                });
            },
            on_data_update: function(data) {
                psiturk.recordTrialData(data);
            }
        });
    </script>

</html>
